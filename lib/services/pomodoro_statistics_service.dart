import 'package:flutter/foundation.dart';
import '../models/pomodoro_session.dart';
import '../models/pomodoro_statistics.dart';

class PomodoroStatisticsService extends ChangeNotifier {
  PomodoroStatistics _statistics = const PomodoroStatistics();
  
  PomodoroStatistics get statistics => _statistics;

  /// –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  void addCompletedSession({
    required PomodoroSessionType sessionType,
    required Duration sessionDuration,
    DateTime? sessionDate,
  }) {
    _statistics = _statistics.addCompletedSession(
      sessionType: sessionType,
      sessionDuration: sessionDuration,
      sessionDate: sessionDate ?? DateTime.now(),
    );
    notifyListeners();
    _saveStatistics();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
  Map<DateTime, int> getWeeklyStats() {
    final now = DateTime.now();
    final weekStart = now.subtract(Duration(days: now.weekday - 1));
    final weekStats = <DateTime, int>{};
    
    for (int i = 0; i < 7; i++) {
      final day = DateTime(weekStart.year, weekStart.month, weekStart.day + i);
      weekStats[day] = _statistics.dailyStats[day] ?? 0;
    }
    
    return weekStats;
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
  Map<DateTime, int> getMonthlyStats() {
    final now = DateTime.now();
    final monthStart = DateTime(now.year, now.month, 1);
    final monthEnd = DateTime(now.year, now.month + 1, 0);
    final monthStats = <DateTime, int>{};
    
    for (int i = 0; i < monthEnd.day; i++) {
      final day = DateTime(monthStart.year, monthStart.month, monthStart.day + i);
      monthStats[day] = _statistics.dailyStats[day] ?? 0;
    }
    
    return monthStats;
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –≤ –¥–µ–Ω—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
  double getAverageSessionsPerDay() {
    final now = DateTime.now();
    final thirtyDaysAgo = now.subtract(const Duration(days: 30));
    
    int totalSessions = 0;
    int daysWithData = 0;
    
    for (final entry in _statistics.dailyStats.entries) {
      if (entry.key.isAfter(thirtyDaysAgo) && entry.key.isBefore(now)) {
        totalSessions += entry.value;
        if (entry.value > 0) daysWithData++;
      }
    }
    
    return daysWithData > 0 ? totalSessions / daysWithData : 0.0;
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –ª—É—á—à—É—é –Ω–µ–¥–µ–ª—é (—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–µ—Å—Å–∏–π)
  int getBestWeekSessions() {
    final now = DateTime.now();
    int maxWeekSessions = 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –Ω–µ–¥–µ–ª—å
    for (int weekOffset = 0; weekOffset < 12; weekOffset++) {
      final weekStart = now.subtract(Duration(days: now.weekday - 1 + (weekOffset * 7)));
      int weekSessions = 0;
      
      for (int i = 0; i < 7; i++) {
        final day = DateTime(weekStart.year, weekStart.month, weekStart.day + i);
        weekSessions += _statistics.dailyStats[day] ?? 0;
      }
      
      if (weekSessions > maxWeekSessions) {
        maxWeekSessions = weekSessions;
      }
    }
    
    return maxWeekSessions;
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8 –ø–æ–º–∏–¥–æ—Ä–æ–≤ –≤ –¥–µ–Ω—å)
  double getGoalCompletionRate({int dailyGoal = 8}) {
    final today = DateTime.now();
    final todayKey = DateTime(today.year, today.month, today.day);
    final todaySessions = _statistics.dailyStats[todayKey] ?? 0;
    
    return (todaySessions / dailyGoal).clamp(0.0, 1.0);
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
  int getActiveDaysInMonth() {
    final now = DateTime.now();
    final monthStart = DateTime(now.year, now.month, 1);
    final monthEnd = DateTime(now.year, now.month + 1, 0);
    
    int activeDays = 0;
    
    for (final entry in _statistics.dailyStats.entries) {
      if (entry.key.isAfter(monthStart.subtract(const Duration(days: 1))) &&
          entry.key.isBefore(monthEnd.add(const Duration(days: 1))) &&
          entry.value > 0) {
        activeDays++;
      }
    }
    
    return activeDays;
  }

  /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  void resetStatistics() {
    _statistics = const PomodoroStatistics();
    notifyListeners();
    _saveStatistics();
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
  Future<void> loadStatistics() async {
    try {
      // TODO: Implement with SharedPreferences or local database
      if (kDebugMode) {
        print('Statistics loaded: $_statistics');
      }
    } catch (e) {
      if (kDebugMode) {
        print('Error loading statistics: $e');
      }
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
  void _saveStatistics() {
    try {
      // TODO: Implement with SharedPreferences or local database
      if (kDebugMode) {
        print('Statistics saved: $_statistics');
      }
    } catch (e) {
      if (kDebugMode) {
        print('Error saving statistics: $e');
      }
    }
  }

  /// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV (–¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
  String exportToCsv() {
    final buffer = StringBuffer();
    buffer.writeln('Date,Sessions,Type');
    
    for (final entry in _statistics.dailyStats.entries) {
      buffer.writeln('${entry.key.toIso8601String().split('T')[0]},${entry.value},daily');
    }
    
    return buffer.toString();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  String getMotivationalMessage() {
    final streak = _statistics.currentStreak;
    final todaySessions = _statistics.todaysCompletedSessions;
    
    if (streak == 0 && todaySessions == 0) {
      return "üçÖ –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–æ–º–∏–¥–æ—Ä —Å–µ–≥–æ–¥–Ω—è!";
    } else if (streak == 1) {
      return "üî• –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!";
    } else if (streak < 7) {
      return "üí™ –°–µ—Ä–∏—è $streak –¥–Ω–µ–π! –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!";
    } else if (streak < 30) {
      return "üèÜ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è —Å–µ—Ä–∏—è $streak –¥–Ω–µ–π! –í—ã - –º–∞—Å—Ç–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!";
    } else {
      return "üåü –õ–µ–≥–µ–Ω–¥–∞! $streak –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! –í—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç–µ –¥—Ä—É–≥–∏—Ö!";
    }
  }
}