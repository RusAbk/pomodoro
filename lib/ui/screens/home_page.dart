import 'package:flutter/material.dart';
import '../../core/design_system.dart';
import '../../models/pomodoro_session.dart';
import '../../services/pomodoro_timer_service.dart';
import '../../services/pomodoro_settings_service.dart';
import '../../services/pomodoro_statistics_service.dart';
import '../widgets/gradient_app_bar.dart';
import '../widgets/glass_components.dart';
import '../widgets/circular_timer.dart';
import '../widgets/mode_selector.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> with TickerProviderStateMixin {
  late final PomodoroTimerService _timerService;
  late final PomodoroSettingsService _settingsService;
  late final PomodoroStatisticsService _statisticsService;
  late AnimationController _slideController;
  late Animation<Offset> _slideAnimation;

  @override
  void initState() {
    super.initState();
    _timerService = PomodoroTimerService();
    _settingsService = PomodoroSettingsService();
    _statisticsService = PomodoroStatisticsService();
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º callback –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    _timerService.onSessionCompleted = (session) {
      _statisticsService.addCompletedSession(
        sessionType: session.type,
        sessionDuration: session.duration,
      );
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–µ–∫–±–∞—Ä —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º
      _showSessionCompletedSnackBar(session);
    };
    
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 0.3),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutBack,
    ));
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
    _slideController.forward();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    _settingsService.loadSettings();
    _statisticsService.loadStatistics();
  }
  
  @override
  void dispose() {
    _slideController.dispose();
    _timerService.dispose();
    super.dispose();
  }

  void _startNewSession() {
    print('_startNewSession –≤—ã–∑–≤–∞–Ω');
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏
    PomodoroSessionType sessionType;
    if (_timerService.currentSession == null) {
      sessionType = PomodoroSessionType.work;
      print('–¢–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—é —Ä–∞–±–æ—á—É—é');
    } else {
      sessionType = _timerService.getNextSessionType(_settingsService.settings);
      print('–û–ø—Ä–µ–¥–µ–ª—è—é —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø: $sessionType');
    }
    
    final duration = _timerService.getDurationForSessionType(sessionType, _settingsService.settings);
    print('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: ${duration.inMinutes} –º–∏–Ω—É—Ç');
    
    _timerService.createSession(
      type: sessionType,
      duration: duration,
    );
    
    print('–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞—é —Ç–∞–π–º–µ—Ä');
    _timerService.startTimer();
  }

  void _toggleTimer() {
    print('_toggleTimer –≤—ã–∑–≤–∞–Ω');
    print('isRunning: ${_timerService.isRunning}');
    print('isPaused: ${_timerService.isPaused}');
    print('currentSession: ${_timerService.currentSession}');
    
    if (_timerService.isRunning) {
      print('–°—Ç–∞–≤–ª—é –Ω–∞ –ø–∞—É–∑—É');
      _timerService.pauseTimer();
    } else if (_timerService.isPaused) {
      print('–í–æ–∑–æ–±–Ω–æ–≤–ª—è—é —Ä–∞–±–æ—Ç—É');
      _timerService.startTimer();
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
      if (_timerService.currentSession == null) {
        print('–°–æ–∑–¥–∞—é –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é');
        _startNewSession();
      } else {
        print('–ó–∞–ø—É—Å–∫–∞—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é');
        // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –µ—Å—Ç—å –Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º
        _timerService.startTimer();
      }
    }
  }

  void _stopTimer() {
    _timerService.stopTimer();
  }
  
  Widget _buildModeSelector() {
    return ListenableBuilder(
      listenable: _timerService,
      builder: (context, child) {
        return ModeSelector(
          currentMode: _timerService.currentSession?.type,
          onModeChanged: (mode) {
            _timerService.switchMode(mode, _settingsService.settings);
          },
          isEnabled: !_timerService.isRunning,
        );
      },
    );
  }

  void _showSessionCompletedSnackBar(PomodoroSession session) {
    final message = session.type == PomodoroSessionType.work 
        ? 'üéâ –†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'
        : '‚ú® –ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!';
    
    final nextType = _timerService.getNextSessionType(_settingsService.settings);
    final nextMessage = nextType == PomodoroSessionType.work
        ? '–°–ª–µ–¥—É—é—â–∏–π: –†–∞–±–æ—Ç–∞'
        : (nextType == PomodoroSessionType.shortBreak 
           ? '–°–ª–µ–¥—É—é—â–∏–π: –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤'
           : '–°–ª–µ–¥—É—é—â–∏–π: –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤');
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(message, style: const TextStyle(fontWeight: FontWeight.bold)),
            Text(nextMessage),
          ],
        ),
        duration: const Duration(seconds: 4),
        action: SnackBarAction(
          label: '–ù–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π',
          onPressed: () {
            _timerService.startNextSession(_settingsService.settings);
          },
        ),
        backgroundColor: Theme.of(context).colorScheme.primary,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              AppColors.primaryColor.withOpacity(0.1),
              Colors.transparent,
            ],
          ),
        ),
        child: Column(
          children: [
            // –ö—Ä–∞—Å–∏–≤—ã–π AppBar
            GradientAppBar(
              title: 'Pomodoro Timer üçÖ',
              actions: [
                IconButton(
                  onPressed: () {
                    // TODO: –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                  },
                  icon: const Icon(Icons.settings_rounded, color: Colors.white),
                ),
                IconButton(
                  onPressed: () {
                    // TODO: –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                  },
                  icon: const Icon(Icons.analytics_rounded, color: Colors.white),
                ),
              ],
            ),
            
            // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            Expanded(
              child: SingleChildScrollView(
                physics: const AlwaysScrollableScrollPhysics(),
                padding: const EdgeInsets.all(AppSpacing.md),
                child: SlideTransition(
                  position: _slideAnimation,
                  child: FadeTransition(
                    opacity: _slideController,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        const SizedBox(height: AppSpacing.lg),
                        
                        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
                        _buildWelcomeCard(),
                        
                        const SizedBox(height: AppSpacing.lg),
                        
                        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤
                        _buildModeSelector(),
                        
                        const SizedBox(height: AppSpacing.xl),
                        
                        // –ö—Ä—É–≥–ª—ã–π —Ç–∞–π–º–µ—Ä
                        _buildTimerSection(),
                        
                        const SizedBox(height: AppSpacing.xl),
                        
                        // –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
                        _buildControlButtons(),
                        
                        const SizedBox(height: AppSpacing.lg),
                        
                        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π
                        _buildSessionStats(),
                        
                        const SizedBox(height: AppSpacing.xxl),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildWelcomeCard() {
    return ListenableBuilder(
      listenable: _statisticsService,
      builder: (context, child) {
        return GlassCard(
          child: Column(
            children: [
              Text(
                'üçÖ Pomodoro Technique',
                style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                  fontWeight: FontWeight.bold,
                  color: AppColors.primaryColor,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: AppSpacing.sm),
              Text(
                _statisticsService.getMotivationalMessage(),
                style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                  color: Theme.of(context).colorScheme.onSurfaceVariant,
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildTimerSection() {
    return ListenableBuilder(
      listenable: _timerService,
      builder: (context, child) {
        return Column(
          children: [
            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
            _buildSessionModeIndicator(),
            const SizedBox(height: AppSpacing.lg),
            
            // –ö—Ä—É–≥–æ–≤–æ–π —Ç–∞–π–º–µ—Ä
            Center(
              child: CircularTimer(
                progress: _timerService.progress,
                remainingTime: _timerService.remainingTime,
                sessionType: _timerService.currentSession?.type,
                isRunning: _timerService.isRunning,
              ),
            ),
            
            const SizedBox(height: AppSpacing.lg),
            
            // –°–ª–µ–¥—É—é—â–∏–π —Ä–µ–∂–∏–º
            _buildNextSessionInfo(),
          ],
        );
      },
    );
  }
  
  Widget _buildSessionModeIndicator() {
    final session = _timerService.currentSession;
    if (session == null) {
      return GlassCard(
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.play_circle_outline,
              color: AppColors.primaryColor,
              size: 24,
            ),
            const SizedBox(width: AppSpacing.sm),
            Text(
              '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
                color: AppColors.primaryColor,
              ),
            ),
          ],
        ),
      );
    }
    
    final (modeText, modeIcon, modeColor) = switch (session.type) {
      PomodoroSessionType.work => ('üçÖ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã', Icons.work, AppColors.primaryColor),
      PomodoroSessionType.shortBreak => ('‚òï –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤', Icons.free_breakfast, AppColors.secondaryColor),
      PomodoroSessionType.longBreak => ('üå¥ –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤', Icons.beach_access, AppColors.accentColor),
    };
    
    return GlassCard(
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            modeIcon,
            color: modeColor,
            size: 24,
          ),
          const SizedBox(width: AppSpacing.sm),
          Text(
            modeText,
            style: Theme.of(context).textTheme.titleMedium?.copyWith(
              fontWeight: FontWeight.bold,
              color: modeColor,
            ),
          ),
        ],
      ),
    );
  }
  
  Widget _buildNextSessionInfo() {
    return ListenableBuilder(
      listenable: _settingsService,
      builder: (context, child) {
        final nextType = _timerService.getNextSessionType(_settingsService.settings);
        final nextDuration = _timerService.getDurationForSessionType(nextType, _settingsService.settings);
        
        final (nextText, nextIcon) = switch (nextType) {
          PomodoroSessionType.work => ('–†–∞–±–æ—Ç–∞', Icons.work_outline),
          PomodoroSessionType.shortBreak => ('–ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤', Icons.free_breakfast_outlined),
          PomodoroSessionType.longBreak => ('–î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤', Icons.beach_access_outlined),
        };
        
        return GestureDetector(
          onTap: () {
            _timerService.switchMode(nextType, _settingsService.settings);
          },
          child: Container(
            padding: const EdgeInsets.symmetric(
              horizontal: AppSpacing.md,
              vertical: AppSpacing.sm,
            ),
            decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.surface.withOpacity(0.7),
              borderRadius: BorderRadius.circular(16),
              border: Border.all(
                color: AppColors.primaryColor.withOpacity(0.3),
                width: 1,
              ),
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(
                  nextIcon,
                  size: 16,
                  color: AppColors.primaryColor,
                ),
                const SizedBox(width: AppSpacing.xs),
                Text(
                  '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π: $nextText (${nextDuration.inMinutes} –º–∏–Ω)',
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: AppColors.primaryColor,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(width: AppSpacing.xs),
                Icon(
                  Icons.touch_app,
                  size: 14,
                  color: AppColors.primaryColor.withOpacity(0.7),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildControlButtons() {
    return ListenableBuilder(
      listenable: _timerService,
      builder: (context, child) {
        return Column(
          children: [
            // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            Row(
              children: [
                // –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç/–ø–∞—É–∑–∞
                Expanded(
                  flex: 2,
                  child: AnimatedGradientButton(
                    text: _timerService.isRunning 
                        ? '–ü–∞—É–∑–∞'
                        : _timerService.isPaused 
                            ? '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'
                            : '–ù–∞—á–∞—Ç—å',
                    icon: _timerService.isRunning 
                        ? Icons.pause_rounded
                        : Icons.play_arrow_rounded,
                    onPressed: _toggleTimer,
                  ),
                ),
                
                const SizedBox(width: AppSpacing.sm),
                
                // –ö–Ω–æ–ø–∫–∞ —Å—Ç–æ–ø/—Å–±—Ä–æ—Å
                Expanded(
                  child: AnimatedGradientButton(
                    text: '–°—Ç–æ–ø',
                    icon: Icons.stop_rounded,
                    onPressed: _timerService.currentSession != null ? _stopTimer : null,
                  ),
                ),
              ],
            ),
          ],
        );
      },
    );
  }

  Widget _buildSessionStats() {
    return ListenableBuilder(
      listenable: Listenable.merge([_timerService, _statisticsService]),
      builder: (context, child) {
        return GlassCard(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                  fontWeight: FontWeight.bold,
                  color: AppColors.primaryColor,
                ),
              ),
              
              const SizedBox(height: AppSpacing.lg),
              
              Row(
                children: [
                  Expanded(
                    child: _buildStatCard(
                      '–°–µ–≥–æ–¥–Ω—è',
                      '${_statisticsService.statistics.todaysCompletedSessions}',
                      'üéØ',
                      AppColors.primaryColor,
                    ),
                  ),
                  const SizedBox(width: AppSpacing.md),
                  Expanded(
                    child: _buildStatCard(
                      '–°–µ—Ä–∏—è –¥–Ω–µ–π',
                      '${_statisticsService.statistics.currentStreak}',
                      'üî•',
                      AppColors.warningColor,
                    ),
                  ),
                ],
              ),
              
              const SizedBox(height: AppSpacing.md),
              
              Row(
                children: [
                  Expanded(
                    child: _buildStatCard(
                      '–í—Å–µ–≥–æ –ø–æ–º–∏–¥–æ—Ä–æ–≤',
                      '${_statisticsService.statistics.completedWorkSessions}',
                      'üçÖ',
                      AppColors.successColor,
                    ),
                  ),
                  const SizedBox(width: AppSpacing.md),
                  Expanded(
                    child: _buildStatCard(
                      '–í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞',
                      '${(_statisticsService.statistics.totalFocusTime.inMinutes / 60).toStringAsFixed(1)}—á',
                      '‚è±Ô∏è',
                      AppColors.accentColor,
                    ),
                  ),
                ],
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildStatCard(String label, String value, String emoji, Color color) {
    return Container(
      padding: const EdgeInsets.all(AppSpacing.md),
      decoration: BoxDecoration(
        gradient: RadialGradient(
          colors: [
            color.withOpacity(0.1),
            Colors.transparent,
          ],
        ),
        borderRadius: BorderRadius.circular(AppRadius.md),
        border: Border.all(
          color: color.withOpacity(0.2),
          width: 1,
        ),
      ),
      child: Column(
        children: [
          Text(
            emoji,
            style: const TextStyle(fontSize: 24),
          ),
          const SizedBox(height: AppSpacing.xs),
          Text(
            value,
            style: Theme.of(context).textTheme.headlineSmall?.copyWith(
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          const SizedBox(height: AppSpacing.xs),
          Text(
            label,
            style: Theme.of(context).textTheme.bodySmall?.copyWith(
              color: Theme.of(context).colorScheme.onSurfaceVariant,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
}